{% macro render_new_password_field(label, name, options={}) %}

  {% set merged_options = { 'classes': '', 'input_classes': '', 'has_autofocus': false } %}
  {# I just need to call `.update` but I have to have some kind of expression. So I am using `set`. #}
  {% set _ = merged_options.update(options) %}
  {% set options = merged_options %}

  <div class="new-password-field field {{ options.classes }}" x-data="new_password_field">

    <label class="label">{{ label }}</label>

    <div class="control has-icons-right">

      <input
        class="new-password-field__input input {{ options.input_classes }}"
        :class="{
          'is-danger': isTouched && !areAllConditionsMet,
          'is-success': isTouched && areAllConditionsMet && score === 4,
        }"
        :type="isVisible ? 'text' : 'password'"
        name="{{ name }}"
        @input="evaluatePassword($el.value)"
        required
        {{ 'autofocus' if options.has_autofocus }} />

      <button
        class="new-password-field__visibility-toggle button is-ghost icon is-right is-small"
        type="button"
        @click="toggleVisibility()">
        <i
          x-show="isVisible"
          class="fa-solid fa-eye-slash"></i>
        <i
          x-show="!isVisible"
          class="fa-solid fa-eye"></i>
      </button>


      <div class="new-password-field__score mb-2">

        <progress
          class="new-password-field__score__indicator progress mb-0"
          :class="{
            'is-danger':  score === 1,
            'is-warning': score === 2,
            'is-info':    score === 3,
            'is-success': score === 4,
          }"
          :value="`${score}`"
          max="4">
        </progress>

        <div
          class="new-password-field__score__message"
          x-text="`Password strength: ${scoreMessage}`">
        </div>

      </div>

    </div>

    <ul class="is-flex">
      <template x-for="condition in conditions" :key="condition.label">
        <li
          class="mr-4"
          :class="{
            'has-text-grey-light': !isTouched,
            'has-text-danger':      isTouched && !condition.isValid,
            'has-text-success':     isTouched && condition.isValid
          }">

          <i
            x-show="condition.isValid"
            class="fa-solid fa-circle-check">
          </i>

          <i
            x-show="!condition.isValid"
            class="fa-solid fa-circle-xmark">
          </i>

          <span x-text="condition.label"></span>

        </li>
      </template>
    </ul>

  </div>
{% endmacro %}
